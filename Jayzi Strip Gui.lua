--Procted by JayziStrip
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/discord"))()

local window = library:Window("JayziStrip Gui")

local Tab = window:Server("Main", "")

local Section = Tab:Channel("Hubs")

Section:Button("Darkdex V2", function(Darkdex2)
pcall(loadstring(game:HttpGet("https://raw.githubusercontent.com/TrixAde/scripts/main/explorer.lua")))
end)

Section:Button("Open GUI", function(OpenGUI)
loadstring(game:HttpGet("https://pastebin.com/raw/6p3mW3hb"))()
end)

Section:Button("Ewyzu Hub", function(jkau)

loadstring(game:HttpGet("https://raw.githubusercontent.com/ewyzu/ewyzu-loader/main/main-ewyzuloader"))()

end)

local Section = Tab:Channel("Steel Titans")

Section:Button("Steel Titans GUI", function(SteelTitans)

loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/AlexR32/Parvus/main/Loader.lua"))()

end)

local Section = Tab:Channel("Bee Swarm Simulator")

Section:Button("Bee Swarm Sim GUI", function(bees)

loadstring(game:HttpGet("https://raw.githubusercontent.com/Boxking776/kocmoc/main/kocmoc-remastered.lua"))()

end)

local Section = Tab:Channel("Prison Life")

Section:Button("Prison Life OP GUI", function(PrisonLi)

loadstring(game:HttpGet("https://raw.githubusercontent.com/chriszrk/Bowser-Hub/main/BowserHubCool", true))()

end)

local Section = Tab:Channel("Starving Artists")

Section:Button("Starving Artists GUI", function(StarvingArtists)
Timer = true --false if you dont wanna timer

loadstring(game:HttpGet(('https://raw.githubusercontent.com/anisnouacer1/My-Roblox-Scripts/main/Starving%20Artist%20%5BNew%5D.lua')))()
end)

local Section = Tab:Channel("Rift Royale")

Section:Button("Rift Royale GUI", function(riftrol)
loadstring(game:HttpGet("https://raw.githubusercontent.com/7GrandDadPGN/VapeV4ForRoblox/main/NewMainScript.lua", true))()
end)

local Section = Tab:Channel("Taxi Boss")

Section:Button("Taxi Boss Gui", function(taxiboss)
loadstring(game:HttpGet("https://raw.githubusercontent.com/x3fall3nangel/FallAngelHub/main/Taxi_Boss.lua"))()
end)

local Section = Tab:Channel("Minerscave 1.5")

Section:Button("Ore ESP GUI", function(oreesp)
getgenv().Diamond = false
getgenv().Steel = false
getgenv().Gold = false
getgenv().Ruby = false
getgenv().Coal = false
getgenv().AX = false
--Functions
function Xray(V)
   local Blocks = game:GetService("Workspace").Blocks:GetDescendants()
   if V ~= "off" then
       for i, v in ipairs(Blocks) do
       if v.Name == "DiamondOre" then
           if Diamond == true then
               v.BoxHandleAdornment.Visible = true
           else
                v.BoxHandleAdornment.Visible = false
           end
       end
       if v.Name == "SteelOre" then
           if Steel == true then
               v.BoxHandleAdornment.Visible = true
           else
                v.BoxHandleAdornment.Visible = false
           end
       end
       if v.Name == "GoldOre" then
           if Gold == true then
               v.BoxHandleAdornment.Visible = true
           else
               v.BoxHandleAdornment.Visible = false
           end
       end
       if v.Name == "RubyOre" then
           if Ruby == true then
               v.BoxHandleAdornment.Visible = true
           else
               v.BoxHandleAdornment.Visible = false
           end
       end
       if v.Name == "CoalOre" then
           if Coal == true then
               v.BoxHandleAdornment.Visible = true
           else
               v.BoxHandleAdornment.Visible = false
           end
       end
   end
   else
       for i, v in ipairs(Blocks) do
       if v.Name == "DiamondOre" then
           v.BoxHandleAdornment.Visible = false
       end
       if v.Name == "SteelOre" then
           v.BoxHandleAdornment.Visible = false
       end
       if v.Name == "GoldOre" then
           v.BoxHandleAdornment.Visible = false
       end
       if v.Name == "RubyOre" then
           v.BoxHandleAdornment.Visible = false
       end
       if v.Name == "CoalOre" then
           v.BoxHandleAdornment.Visible = false
       end
       end
   end
end

--Gui
local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow("MinersCave") -- Creates the window

local b = w:CreateFolder("Actions")

local c =  w:CreateFolder("BlockFilters")

--Xray Toggle
b:Toggle("Xray",function(bool)
   if bool == true then
       Xray()
       getgenv().AX = true
   else
       Xray("off")
       getgenv().AX = false
   end
end)

--Ore Filters
c:Toggle("Diamond",function(bool)
   if bool == true then
       getgenv().Diamond = true
   else
       getgenv().Diamond = false
   end
   if getgenv().AX == true then
   Xray()
   end
end)

c:Toggle("Steel",function(bool)
   if bool == true then
       getgenv().Steel = true
   else
       getgenv().Steel = false
   end
   if getgenv().AX == true then
   Xray()
   end
end)

c:Toggle("Gold",function(bool)
   if bool == true then
       getgenv().Gold = true
   else
       getgenv().Gold = false
   end
  if getgenv().AX == true then
   Xray()
   end
end)

c:Toggle("Ruby",function(bool)
   if bool == true then
       getgenv().Ruby = true
   else
       getgenv().Ruby = false
   end
  if getgenv().AX == true then
   Xray()
   end
end)

c:Toggle("Coal",function(bool)
   if bool == true then
       getgenv().Coal = true
   else
       getgenv().Coal = false
   end
  if getgenv().AX == true then
   Xray()
   end
end)
end)

Section:Button("Kill Aura", function(Killaura)
local utils = {};
local Players = game:GetService('Players');
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local LocalPlayer = Players.LocalPlayer;
utils.attackPlayer = function(player)
    if (player.Character ~= nil) then ReplicatedStorage.GameRemotes.Attack:InvokeServer(player.Character) end
end
utils.getClosestPlayer = function()
    local Closest;
    for i,v in pairs(Players:GetPlayers()) do
        if (v ~= LocalPlayer and v.Character ~= nil and v.Character.PrimaryPart ~= nil) then
            if (Closest ~= nil) then
                if ((LocalPlayer.Character.PrimaryPart.Position-v.Character.PrimaryPart.Position).Magnitude < (LocalPlayer.Character.PrimaryPart.Position-Closest.Character.PrimaryPart.Position).Magnitude) then
                    Closest = v;
                end
            else
                Closest = v;
            end
        end
    end
    return Closest;
end

while wait() do utils.attackPlayer(utils.getClosestPlayer()) end

end)

local Section = Tab:Channel("Driving Empire")

Section:Button("Driving Empire GUI", function(DrivEmp)

_G.RedGUI = true
_G.Theme = "Dark" -- Must disable or remove _G.RedGUI to use
--Themes: Light, Dark, Mocha, Aqua and Jester

loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/DrivingEmpire.lua"))()
end)

local Section = Tab:Channel("Pet Simulator")

Section:Button("Pet Simulator GUI (old)", function(Petgui)
loadstring(game:HttpGet("https://raw.githubusercontent.com/Wind596/VoidHub/main/WiningDediy", true))()
end)

local Section = Tab:Channel("Main")

Section:Button("Fake Server Mes of Admin", function(fakeadmin)
player =  "Server"
fakemsg = "Welcome Admin TrollMan joined"
message = "Hi                                                                                                                                                            ["..tostring(player).."]: "..tostring(fakemsg)
game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
end)

Section:Button("Inf Yield", function(Yield)

loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()

end)

Section:Button("Anti Afk1", function(Afk)
loadstring(game:HttpGet("https://raw.githubusercontent.com/KazeOnTop/Rice-Anti-Afk/main/Wind", true))()
end)

Section:Button("Anti Afk2", function(Afk1)
wait(0.5)local ba=Instance.new("ScreenGui")
local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
ca.TextSize=22;da.Parent=ca
da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
da.Size=UDim2.new(0,370,0,107)_b.Parent=da
_b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
_b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="Made by Dynamic. (please subscribe)"
_b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
bb:CaptureController()bb:ClickButton2(Vector2.new())
ab.Text="Roblox Tried to kick you but we didnt let them kick you :D"wait(2)ab.Text="Status : Active"end)
end)

Section:Button("CtrlDelete", function(Ctrldlt)
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()
Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target:Destroy()
end)
end)

Section:Button("GOD MOD", function(Godm)

loadstring(game:HttpGet("https://pastebin.com/raw/FwfNEqYz", true))()

end)

Section:Button("Music GUI", function(MUS)
loadstring(game:HttpGet("https://gitlab.com/Tsuniox/lua-stuff/-/raw/master/R15GUI.lua"))()
end)

Section:Button("Server Hop", function(serverhop)

local module = loadstring(game:HttpGet"https://raw.githubusercontent.com/LeoKholYt/roblox/main/lk_serverhop.lua")()

module:Teleport(game.PlaceId)

end)

Section:Button("FPS BOOST", function(fpsss)

-- Made by RIP#6666
_G.Settings = {
    Players = {
        ["Ignore Me"] = true, -- Ignore your Character
        ["Ignore Others"] = true -- Ignore other Characters
    },
    Meshes = {
        Destroy = false, -- Destroy Meshes
        LowDetail = true -- Low detail meshes (NOT SURE IT DOES ANYTHING)
    },
    Images = {
        Invisible = true, -- Invisible Images
        LowDetail = false, -- Low detail images (NOT SURE IT DOES ANYTHING)
        Destroy = false, -- Destroy Images
    },
    Other = {
        ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
        ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
        ["No Explosions"] = true, -- Makes Explosion's invisible
        ["No Clothes"] = true, -- Removes Clothing from the game
        ["Low Water Graphics"] = true, -- Removes Water Quality
        ["No Shadows"] = true, -- Remove Shadows
        ["Low Rendering"] = true, -- Lower Rendering
        ["Low Quality Parts"] = true -- Lower quality parts
    }
}
loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/FPSBooster.lua"))()

end)

Section:Button("Auto Cliker GUI", function(autokl)

loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/JustEzpi/ROBLOX-Scripts/main/ROBLOX_AutoClicker"))()

end)

Section:Button("Roblox - Chat Bypass", function(chat)

loadstring(game:HttpGet("https://the-shed.xyz/roblox/scripts/ChatBypass", true))()

end)

Section:Button("Rejoin server[Bag/kick]", function(Rej)
loadstring(game:HttpGet("https://pastebin.com/raw/1gtVMUz3"))()
end)

Section:Button("Coordinates Grabber Gui", function(corrdg)

loadstring(game:HttpGet("https://pastebin.com/raw/GdmzzrDz", true))()

end)

Section:Textbox("Walk Speed", "Default : 16", "", function (value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
end)

Section:Toggle("random", false, function(omg)
end)

Section:Slider("idk", false, function(omg)
end)